---
description: Cursor使用時の常に適用されるルール - 全プロジェクト共通の開発指針
alwaysApply: true
---

# Cursor使用時の常に適用されるルール

## 基本方針
- **安全性最優先**: 既存機能を壊さない、信頼度チェックを重視
- **高頻度開発**: 小刻みなコミット、即座のテスト、段階的デバッグ
- **ドキュメント重視**: 機能追加時は必ずREADMEとテストケースを更新

## 開発ワークフロー

### コミット・テスト
- **小刻みなコミット**: 機能単位で細かくコミット
- **即座のテスト**: 変更後は必ずテストケースで動作確認
- **段階的デバッグ**: 各処理段階でconsole.logで状況確認

### 安全性チェック
- **信頼度計算**: 全抽出処理で信頼度を計算・記録
- **複数マッチ検出**: 複数候補が見つかった場合は即座に拒否
- **部分一致の危険性**: 部分一致は安全性のため基本的に拒否

## コード品質

### エラーハンドリング
- **try-catch文**: 全非同期処理でエラーハンドリング
- **日本語エラーメッセージ**: ユーザーが理解しやすいエラー表示
- **ログ記録**: エラー発生時の詳細ログ出力

### ログ出力
- **絵文字使用**: ログの視認性を高める
- **段階的ログ**: 各処理段階での詳細ログ
- **信頼度表示**: 各抽出結果の信頼度を表示

## プロジェクト固有の最適化

### herpkyujinshutoku (履歴書処理)
- **PDF処理**: rirekisho形式のみに特化、文字化け対応
- **RAコメント処理**: W送付パターンの厳格な解析
- **統合処理**: PDF優先、RAコメント補完

### jobcanrpa (JobCan自動化)
- **フォーム自動入力**: 履歴書データの自動入力
- **セレクター管理**: 安定したセレクターの使用

### herprpa (HERP自動化)
- **ブラウザ自動化**: Puppeteerを使った自動化
- **マルチブラウザ対応**: 複数ブラウザの検出と対応

### Webアプリケーション
- **React/Next.js**: コンポーネント設計、状態管理
- **Node.js/Express**: API実装、エラーハンドリング
- **Firebase**: データベース、認証

## AI支援開発

### Claude・Cursor活用
- **具体的な指示**: 実装したい機能を具体的に指示
- **コンテキスト提供**: 関連するコードや仕様を提供
- **段階的実装**: 複雑な機能は段階的に実装

### Serena MCP活用
- **複雑なコード解析**: アーキテクチャ理解、依存関係調査
- **シンボル調査**: 関数・クラス検索、変数追跡
- **リファクタリング**: 大規模なリファクタリングの支援

## ドキュメント更新
- **機能追加時**: README.mdとテストケースを更新
- **分析結果**: 重要な分析結果はMarkdownファイルで保存
- **コメント充実**: 複雑なロジックには詳細なコメントを追加
