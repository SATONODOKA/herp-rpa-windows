---
description: ユーザーフィードバックパターン - 繰り返し指摘される内容をルール化
alwaysApply: true
---

# ユーザーフィードバックパターン

## 安全性・信頼性の最優先

### 必須遵守事項
- **安全性チェックは最優先で維持する** - 機能追加時も既存の安全性を損なわない
- **信頼度90%未満の抽出は拒否する** - 曖昧な結果は受け入れない
- **複数マッチの検出時は即座に処理を停止** - 安全性のため手動確認を促す
- **部分一致は基本的に拒否** - 完全一致を優先し、部分一致は危険とみなす

### 実装時の注意点
- 新機能追加時は既存の安全性機能を必ず維持
- 信頼度計算を全抽出処理で実装
- 複数候補検出時は即座にエラーとして処理停止
- 部分一致検出時は警告を出して拒否

## ドキュメント・説明の充実

### 出力形式の要求
- **書式コードで出力** - 他の人に共有しやすい形式
- **Teamsで共有しやすい書式** - わかりやすく整理された説明
- **詳細に記述** - 表面的でない深い説明
- **1個にまとめて出力** - 分散した情報を統合

### ドキュメント作成時の注意点
- Markdown形式で構造化された説明
- コード例と実行例を含める
- 図表や絵文字で視認性を高める
- 関連情報を1つのファイルにまとめる

## 開発手法の徹底

### 必須開発手法
- **小刻みなコミット** - 機能単位で細かくコミット
- **即座のテスト** - 変更後は必ずテスト実行
- **段階的デバッグ** - 各処理段階でconsole.logで状況確認
- **継続的検証** - 各段階で動作確認

### 実装時の注意点
- 1つの機能を実装したら即座にコミット
- テストケースを作成して動作確認
- 各処理段階でログ出力して状況を把握
- 問題があれば即座に修正

## プロジェクト理解の徹底

### 既存コード理解の重要性
- **既存のパターンマッチングロジックを理解してから修正** - 既存ロジックを壊さない
- **既存の正規化処理との整合性を確認** - 一貫性を保つ
- **複雑なコード解析にはSerena MCPを積極活用** - 深い理解のため

### 修正時の注意点
- 既存コードの動作を完全に理解してから修正
- 既存の処理フローとの整合性を確認
- 複雑な解析が必要な場合はSerena MCPを使用
- 影響範囲を事前に調査

## 実用性・効率性の重視

### 実用性の要求
- **他の開発で使える形式** - 再利用可能な形で出力
- **ローカルでのテスト** - 実際に動作確認できる状態
- **問題解決の迅速性** - 即座に解決策を提供

### 効率性の重視
- 再起動などの基本的なトラブルシューティング
- 即座に使える状態での提供
- 段階的な問題解決アプローチ

## コミュニケーションスタイル

### ユーザーの好むスタイル
- **具体的で実用的な回答** - 抽象的な説明は避ける
- **段階的な説明** - 複雑な内容は段階的に説明
- **即座の対応** - 問題があれば即座に解決
- **継続的な改善** - フィードバックに基づく改善

### 避けるべきスタイル
- 長すぎる説明（要点を絞る）
- 抽象的な概念説明（具体例を交える）
- 一度に多くの情報（段階的に提供）
- 既存の指摘の無視（過去のフィードバックを反映）
